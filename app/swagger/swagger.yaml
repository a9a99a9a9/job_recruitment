swagger: "2.0"
info:
  title: Job Recruitment Backend API
  description: Swagger documentation for Job Recruitment Backend API
  version: 1.0.0
host: localhost:80
schemes:
  - http
paths:
  /applications:
    post:
      summary: "지원하기"
      description: "사용자가 특정 채용 공고에 지원합니다."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: "지원 정보"
          schema:
            type: object
            required:
              - job_id
            properties:
              job_id:
                type: string
                description: "지원할 채용 공고 ID"
              resume:
                type: string
                description: "선택적으로 포함할 이력서 URL"
      responses:
        201:
          description: "지원 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: object
                properties:
                  message:
                    type: string
                    example: "지원이 성공적으로 완료되었습니다."
                  application_id:
                    type: string
                    example: "12345"
        400:
          description: "요청 오류"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "잘못된 ID 또는 인증되지 않은 접근"
              code:
                type: string
                example: "INVALID_ID"
    get:
      summary: "지원 내역 조회"
      description: "사용자의 지원 내역을 조회합니다."
      produces:
        - application/json
      parameters:
        - name: status
          in: query
          type: string
          description: "필터링할 지원 상태 (예: pending, approved, rejected)"
        - name: sort_by
          in: query
          type: string
          description: "정렬 기준 (기본값: created_at)"
        - name: order
          in: query
          type: integer
          description: "정렬 순서 (1: 오름차순, -1: 내림차순)"
      responses:
        200:
          description: "지원 내역 조회 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: array
                items:
                  type: object
              pagination:
                type: object
                properties:
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
                  totalItems:
                    type: integer
                    example: 100
                  itemsPerPage:
                    type: integer
                    example: 20
        400:
          description: "요청 오류"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "잘못된 쿼리 또는 데이터베이스 연결 실패"
              code:
                type: string
                example: "INVALID_QUERY"
  /applications/{application_id}:
    delete:
      summary: "지원 취소"
      description: "특정 지원 내역을 취소합니다."
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          required: true
          type: string
          description: "취소할 지원 ID"
      responses:
        200:
          description: "지원 취소 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "지원이 성공적으로 취소되었습니다."
        400:
          description: "요청 오류"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "잘못된 지원 ID"
              code:
                type: string
                example: "INVALID_APPLICATION_ID"
  /applications/{application_id}/status:
    patch:
      summary: "지원 상태 업데이트"
      description: "특정 지원 내역의 상태를 업데이트합니다."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          required: true
          type: string
          description: "상태를 업데이트할 지원 ID"
        - in: body
          name: body
          required: true
          description: "업데이트할 상태 정보"
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
                description: "새로운 상태 (예: pending, approved, rejected)"
      responses:
        200:
          description: "상태 업데이트 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "상태가 성공적으로 업데이트되었습니다."
        400:
          description: "요청 오류"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "상태 필드 누락"
              code:
                type: string
                example: "MISSING_STATUS_FIELD"
        404:
          description: "지원 내역을 찾을 수 없음"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "지원 내역을 찾을 수 없습니다."
              code:
                type: string
                example: "APPLICATION_NOT_FOUND"
  /auth/register:
    post:
      summary: "회원 가입"
      description: "새로운 사용자를 등록합니다."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: "회원 가입 정보"
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                description: "사용자의 이메일 주소"
              password:
                type: string
                description: "사용자의 비밀번호 (최소 6자 이상)"
              username:
                type: string
                description: "사용자의 이름"
      responses:
        201:
          description: "회원 가입 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: object
                properties:
                  message:
                    type: string
                    example: "회원 가입이 성공적으로 완료되었습니다."
                  user_id:
                    type: string
                    example: "user123"
        400:
          description: "요청 오류"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "잘못된 요청"
              code:
                type: string
                example: "INVALID_REQUEST"
  /auth/login:
    post:
      summary: "로그인"
      description: "사용자가 시스템에 로그인합니다."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: "로그인 정보"
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                description: "사용자의 이메일 주소"
              password:
                type: string
                description: "사용자의 비밀번호"
      responses:
        200:
          description: "로그인 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: object
                properties:
                  message:
                    type: string
                    example: "로그인 성공"
                  access_token:
                    type: string
                    example: "access_token_here"
                  refresh_token:
                    type: string
                    example: "refresh_token_here"
        401:
          description: "로그인 실패"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "로그인 실패"
              code:
                type: string
                example: "INVALID_CREDENTIALS"
  /auth/refresh:
    post:
      summary: "토큰 갱신"
      description: "리프레시 토큰을 사용해 새로운 액세스 토큰을 발급받습니다."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: "리프레시 토큰"
          schema:
            type: object
            required:
              - refresh_token
            properties:
              refresh_token:
                type: string
                description: "리프레시 토큰"
      responses:
        200:
          description: "토큰 갱신 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: object
                properties:
                  message:
                    type: string
                    example: "토큰 갱신 성공"
                  access_token:
                    type: string
                    example: "new_access_token"
        401:
          description: "유효하지 않은 토큰"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "유효하지 않은 토큰"
              code:
                type: string
                example: "INVALID_TOKEN"
  /auth/logout:
    post:
      summary: "로그아웃"
      description: "현재 사용자의 세션을 로그아웃합니다."
      produces:
        - application/json
      responses:
        200:
          description: "로그아웃 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "로그아웃 성공"
  /auth/profile:
    put:
      summary: "회원 정보 수정"
      description: "회원 정보를 수정합니다."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: "수정할 회원 정보"
          schema:
            type: object
            properties:
              password:
                type: string
                description: "새로운 비밀번호 (선택 사항)"
              username:
                type: string
                description: "새로운 사용자 이름 (선택 사항)"
      responses:
        200:
          description: "회원 정보 수정 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "회원 정보가 성공적으로 수정되었습니다."
  /auth/delete:
    delete:
      summary: "회원 탈퇴"
      description: "회원 탈퇴를 처리합니다."
      produces:
        - application/json
      responses:
        200:
          description: "회원 탈퇴 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "회원 탈퇴가 성공적으로 완료되었습니다."
  /bookmarks:
    post:
      summary: "북마크 추가/제거 (토글)"
      description: "특정 채용 공고를 북마크에 추가하거나 제거합니다."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: "북마크 토글 정보"
          schema:
            type: object
            required:
              - job_id
            properties:
              job_id:
                type: string
                description: "북마크를 추가/제거할 채용 공고 ID"
      responses:
        200:
          description: "북마크 추가 또는 제거 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: object
                properties:
                  message:
                    type: string
                    example: "북마크가 성공적으로 추가/제거되었습니다."
        400:
          description: "요청 오류"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "잘못된 요청"
              code:
                type: string
                example: "INVALID_REQUEST"
    get:
      summary: "북마크 조회"
      description: "사용자가 저장한 북마크를 조회합니다."
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          type: integer
          description: "현재 페이지 번호 (기본값: 1)"
        - name: limit
          in: query
          type: integer
          description: "페이지당 항목 수 (기본값: 20)"
      responses:
        200:
          description: "북마크 조회 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: array
                items:
                  type: object
              pagination:
                type: object
                properties:
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
                  totalItems:
                    type: integer
                    example: 100
                  itemsPerPage:
                    type: integer
                    example: 20
        400:
          description: "요청 오류"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "잘못된 요청"
              code:
                type: string
                example: "INVALID_QUERY"
  /jobs:
    get:
      summary: "채용 공고 목록 조회"
      description: "필터, 정렬 및 페이지네이션을 통해 채용 공고를 조회합니다."
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          type: integer
          description: "현재 페이지 번호 (기본값: 1)"
        - name: limit
          in: query
          type: integer
          description: "페이지당 항목 수 (기본값: 20)"
        - name: sort_by
          in: query
          type: string
          description: "정렬 기준 (예: created_at)"
        - name: order
          in: query
          type: integer
          description: "정렬 순서 (1: 오름차순, -1: 내림차순)"
        - name: location
          in: query
          type: string
          description: "필터링할 지역 (예: Seoul)"
        - name: 경력
          in: query
          type: string
          description: "필터링할 경력 (예: 신입)"
        - name: salary
          in: query
          type: integer
          description: "최소 연봉 기준 (예: 3000)"
        - name: stack
          in: query
          type: string
          description: "필터링할 기술 스택 (쉼표로 구분, 예: Python,React)"
      responses:
        200:
          description: "채용 공고 목록 조회 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: array
                items:
                  type: object
              pagination:
                type: object
                properties:
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
                  totalItems:
                    type: integer
                    example: 100
                  itemsPerPage:
                    type: integer
                    example: 20
        400:
          description: "요청 오류"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "잘못된 요청"
              code:
                type: string
                example: "INVALID_REQUEST"
  /jobs/{job_id}:
    get:
      summary: "채용 공고 상세 조회"
      description: "특정 채용 공고의 세부 정보를 조회합니다."
      produces:
        - application/json
      parameters:
        - name: job_id
          in: path
          required: true
          type: string
          description: "조회할 채용 공고 ID"
      responses:
        200:
          description: "채용 공고 상세 조회 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: object
              recommended:
                type: array
                items:
                  type: object
        404:
          description: "채용 공고를 찾을 수 없음"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "채용 공고를 찾을 수 없습니다."
              code:
                type: string
                example: "JOB_NOT_FOUND"
  /jobs/search:
    get:
      summary: "채용 공고 검색"
      description: "검색어를 기반으로 채용 공고를 검색합니다."
      produces:
        - application/json
      parameters:
        - name: query
          in: query
          type: string
          description: "검색어"
          required: true
      responses:
        200:
          description: "채용 공고 검색 성공"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: array
                items:
                  type: object
        400:
          description: "검색어 없음"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "검색어가 제공되지 않았습니다."
              code:
                type: string
                example: "MISSING_QUERY"
