swagger: "2.0"
info:
  title: Job Recruitment Backend API
  description: Swagger documentation for Job Recruitment Backend API
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5001
    description: Local server

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword123
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "회원 가입 성공"
                  user_id:
                    type: string
                    example: "63c1f3f6c5a6781b7df84b2e"

  /auth/login:
    post:
      summary: Login a user
      requestBody:
        description: User login data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "로그인 성공"
                  token:
                    type: string
                    example: "JWT_ACCESS_TOKEN"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "이메일 또는 비밀번호가 잘못되었습니다."

  /auth/profile:
    put:
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        description: Profile update data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "newusername"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "회원 정보 수정 성공"
                  updated:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "유효하지 않은 토큰입니다."

  /auth/delete:
    delete:
      summary: Delete a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "회원 탈퇴 성공"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "유효하지 않은 토큰입니다."

  /bookmarks:
    post:
      summary: Add a bookmark
      requestBody:
        description: Bookmark data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "63c1f3f6c5a6781b7df84b2e"
                job_id:
                  type: string
                  example: "job12345"
      responses:
        '201':
          description: Bookmark added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "북마크 추가 성공"
                  bookmark_id:
                    type: string
                    example: "63c1f3f6c5a6781b7df84b2f"

    get:
      summary: Get bookmarks
      parameters:
        - name: user_id
          in: query
          schema:
            type: string
            example: "63c1f3f6c5a6781b7df84b2e"
          required: true
          description: User ID to fetch bookmarks
      responses:
        '200':
          description: Bookmarks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "63c1f3f6c5a6781b7df84b2e"
                        job_id:
                          type: string
                          example: "job12345"

  /applications:
    post:
      summary: Apply for a job
      requestBody:
        description: Application data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "63c1f3f6c5a6781b7df84b2e"
                job_id:
                  type: string
                  example: "job12345"
      responses:
        '201':
          description: Application created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "지원 성공"
                  application_id:
                    type: string
                    example: "application12345"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
